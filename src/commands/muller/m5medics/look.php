<?php
/********************************************************************************
    Code to examine data/tmp/muller/5-medics/muller5-1083-medics.csv
    (not the raw file, the intermediate file generated by raw2tmp.php).
    Not part of any build process - only to try to understand.
    
    To add a new function : 
        - add <entry> in POSSIBLE_PARAMS
        - implement a method named "look_<entry>"
    
    @license    GPL
    @history    2019-05-11 18:58:50+02:00, Thierry Graff : creation
********************************************************************************/
namespace g5\commands\muller\m5medics;

use tiglib\patterns\Command;
use g5\commands\gauq\LERRCP;
use tiglib\arrays\sortByKey;

class look implements Command {
    
    /** 
        Possible values of the command, for ex :
        php run-g5.php muller m5medics look gnr
    **/
    const POSSIBLE_PARAMS = [
        'curadates',
        'curanames',
        'fields',
        'gnr',
        'nobilities',
        'paris',
        'sample',
    ];
    
    // *****************************************
    /** 
        Routes to the different actions, based on $param
        @param $params Array
                       First element indicates which method execute ; must be one of self::POSSIBLE_PARAMS
                       Other elements are transmitted to the called method.
                       (Called methods are responsible to handle their params).
    **/
    public static function execute($params=[]): string{
        $possibleParams_str = implode(', ', self::POSSIBLE_PARAMS);
        if(count($params) == 0){
            return "PARAMETER MISSING\n"
                . "Possible values for parameter : $possibleParams_str\n";
        }
        $param = $params[0];
        if(!in_array($param, self::POSSIBLE_PARAMS)){
            return "INVALID PARAMETER\n"
                . "Possible values for parameter : $possibleParams_str\n";
        }
        
        $method = 'look_' . $param;
        
        if(count($params) > 1){
            array_shift($params);
            return self::$method($params);
        }
        
        return self::$method();
    }
    
    
    // ******************************************************
    /**
        Returns a html table with the fields.
    **/
    private static function look_fields(){
        $res = "<table class=\"wikitable margin\">\n";
        $res .= "    <tr><th>Field</th><th>Meaning</th></tr>\n";
        foreach(M5medics::RAW_FIELDS as $k => $v){
            $res .= "    <tr><td>$k</td><td>$v</td></tr>\n";
        }
        $res .= "</table>\n";
        return $res;
    }
    
    
    // ******************************************************
    /**
        Look at records born in Paris.
    **/
    private static function look_paris($params=[]){
        $data = [];
        $N = $N1860 = 0;
        $rows = M5medics::loadTmpFile();
        foreach($rows as $row){
            if($row['PLACE'] != 'Paris'){
                continue;
            }
            $data[] = $row;
            $N++;
            if($row['DATE'] < '1860'){
                $N1860++;
            }
        }
        $data = sortByKey::compute($data, 'DATE');
        $res = "DATE             NR\tGNR\tNAME\n";
        $res .= "------------------------------------------------\n";
        foreach($data as $row){
            $res .= $row['DATE'] . ' ' . $row['NR'] . "\t" .  $row['GNR'] . "\t" . $row['GNAME'] . ' ' . $row['FNAME'] . "\n";
        }
        $res .= "---\n";
        $res .= "Total : $N\n";
        $res .= "Born before 1860 : $N1860\n";
        return $res;
    }
    
    
    // ******************************************************
    /**
        Look at SAMPLE column.
    **/
    private static function look_sample($params=[]){
        $output = $params[0] ?? 'text';
        $rows = M5medics::loadTmpFile();
        // assoc SAMPLE => nb of records with this code
        $data = array_fill_keys(array_keys(M5medics::SAMPLE_CODE), 0); 
        foreach($rows as $row){
            $data[$row['SAMPLE']] ++;
        }
//        ksort($data);
        $res = '';
        switch($output){
        case 'text': 
            $res .= "SAMPLE\t\tN\tCODE\n";
            $res .= "-----------------------------\n";
            foreach($data as $k => $v){
                $res .=  "$k\t$v\t" . M5medics::SAMPLE_CODE[$k] . "\n";
            }
        break;
        case 'table': 
            $res = "<table class=\"wikitable margin\">\n";
            $res .= "    <tr><th>SAMPLE</th><th>CODE</th><th>Nb</th><th>GNR ?</th></tr>\n";
            foreach($data as $k => $v){
                $res .= "    <tr><td>$k</td><td>" . M5medics::SAMPLE_CODE[$k] . "</td><td>$v</td><td>" . M5medics::SAMPLE_GNR[$k] . "</td></tr>\n";
            }
            $res .= "</table>\n";
        break;
        }
        return $res;
    }
    
    
    // ******************************************************
    /**
        Look at GNR column.
        Indicates the number of records common with cura A3 and E1
    **/
    private static function look_gnr(){
        $rows = M5medics::loadTmpFile();
        $res = [
            'EMPTY' => 0,
            'A2' => 0,
            'E1' => 0,
        ];
        foreach($rows as $row){
            $gnr = $row['GNR'];
            if($gnr == ''){
                $res['EMPTY']++;
            }
            else if(substr($gnr, 0, 3) == 'SA2'){
                $res['A2']++;
            }
            else if(substr($gnr, 0, 3) == 'ND1'){
                $res['E1']++;
            }
            else{
                echo "Unknown GNR : $gnr\n";
            }
        }
        foreach($res as $k => $v){
            echo "$k \t: $v\n";
        }
        echo "A2 + E1 : " . ($res['A2'] + $res['E1']) . "\n";
        echo "Total \t: " . array_sum($res) . "\n";
        return '';
    }
    
    
    // ******************************************************
    /**
        Must be executed after fixGnr
    **/
    private static function look_curanames(){
        $a2s = LERRCP::loadTmpFile_num('A2'); // keys = NUM
        $e1s = LERRCP::loadTmpFile_num('E1'); // keys = NUM
        $MullerCsv = M5medics::loadTmpFile_nr(); // keys = NR
        
        foreach($MullerCsv as $NR => $mulrow){
            $GNR = $mulrow['GNR'];
            if($GNR == ''){
                continue;
            }
            
            $curaPrefix = substr($GNR, 0, 3); // SA2 or ND1
            if($curaPrefix == 'SA2'){                                                                  
                $curaFile =& $a2s;
                $curaFilename = 'A2';
            }
            else{
                $curaFile =& $e1s;
                $curaFilename = 'E1';
            }
            
            $NUM = substr($mulrow['GNR'], 3);
            $curarow =& $curaFile[$NUM];
            echo "MÃ¼ller NR $NR {$mulrow['FNAME']}\t| {$mulrow['GNAME']}\n";
            echo "$curaFilename    NUM $NUM {$curarow['FNAME']}\t| {$curarow['GNAME']}\n";
            echo "\n";
        }
        return '';        
    }
    
    
    // ******************************************************
     /**
         Prints the records with a word "De" or "de" in the family or given name.
         @param     $params Array with one element which must contain a string, which can take the values :
                    - "simple" : simply prints the names of noble persons.
                    - "yaml" : prints the noble persons in a yaml format
                               (was used to write data/db/init/newalch-tweak/1083MED.yml)
     **/
     private static function look_nobilities($params=[]){
        $msg = "This function needs one parameter to indicate the format. Can be \n"
        . "  simple : displays the noble persons\n"
        . "  yaml : displays the noble persons in a yaml format\n"
        . "         (was used to write data/db/init/newalch-tweak/1083MED.yml)\n";
        if(count($params) != 1){
            return $msg;
        }
        $format = $params[0];
        if(!in_array($format, ['simple', 'yaml'])){
            return $msg;
        }
        
        $MullerCsv = M5medics::loadTmpFile_nr(); // keys = NR
        $p = '/\b[Dd]e\b/';
        $n = 0;
        foreach($MullerCsv as $NR => $mulrow){
            if(preg_match($p, $mulrow['FNAME']) !== 0 || preg_match($p, $mulrow['GNAME']) !== 0){
                $n++;
                if($format == 'simple'){
                    echo "$NR {$mulrow['FNAME']}| {$mulrow['GNAME']}\n";
                }
                else{
                    echo "-\n";
                    echo "  NR: $NR\n";
                    echo "  FNAME: {$mulrow['FNAME']}\n";
                    echo "  GNAME: {$mulrow['GNAME']}\n";
                    echo "\n";
                }
            }
        }
        echo "$n records concern noble persons.\n";
        return '';
     } 
    
    // ******************************************************
    /**
        Must be executed after fixGnr
    **/
    private static function look_curadates(){
        $a2s = LERRCP::loadTmpFile_num('A2'); // keys = NUM
        $e1s = LERRCP::loadTmpFile_num('E1'); // keys = NUM
        $MullerCsv = M5medics::loadTmpFile_nr(); // keys = NR
        
        $equalA2 = $diffA2 = $totalA2 = 0;
        $equalE1 = $diffE1 = $totalE1 = 0;
        
        foreach($MullerCsv as $NR => $mulrow){
            $GNR = $mulrow['GNR'];
            if($GNR == ''){
                continue;
            }
            
            $curaPrefix = substr($GNR, 0, 3); // SA2 or ND1
            if($curaPrefix == 'SA2'){                                                                  
                $curaFile =& $a2s;
                $curaFilename = 'A2';
            }
            else{
                $curaFile =& $e1s;
                $curaFilename = 'E1';                                
            }
            
            $NUM = substr($mulrow['GNR'], 3);
            $curarow =& $curaFile[$NUM];
            $mulday = substr($mulrow['DATE'], 0, 10);
            $curaday = $curaFilename == 'A2'
                ? substr($curarow['DATE-UT'], 0, 10)
                : substr($curarow['DATE'], 0, 10);
            
            if($curaFilename == 'A2'){
                $totalA2++;
                if($mulday == $curaday){
                    $equalA2++;
                    continue;
                }
                else{
                    $diffA2++;                                          
                }
            }
            else{
                $totalE1++;
                if($mulday == $curaday){
                    $equalE1++;
                    continue;
                }
                else{
                    $diffE1++;
                }
            }
            
            $NUM = str_pad($NUM, 4);
            $NR = str_pad($NR, 4);
            echo "MÃ¼ller NR $NR $mulday\t| {$mulrow['FNAME']}\t| {$mulrow['GNAME']}\n";
            echo "$curaFilename    NUM $NUM $curaday\t| {$curarow['FNAME']}\t| {$curarow['GNAME']}\n";
            echo "\n";
        }
        $total = $totalA2 + $totalE1;
        $equal = $equalA2 + $equalE1;
        $diff = $diffA2 + $diffE1;
        $pEqA2 = round(100 * $equalA2 / $totalA2, 2);
        $pDiffA2 = 100 - $pEqA2;
        $pEqE1 = round(100 * $equalE1 / $totalE1, 2);
        $pDiffE1 = 100 - $pEqE1;
        $pEq = round(100 * $equal / $total, 2);
        $pDiff = 100 - $pEq;
        echo "Compare dates MÃ¼ller / A2 E1\n";
        echo "        | Equal         | Different  | Total\n";
        echo "--------------------------------------------\n";
        echo "A2      | $equalA2 ($pEqA2 %) | $diffA2 ($pDiffA2 %)| $totalA2\n";
        echo "E1      | $equalE1  ($pEqE1 %) | $diffE1  ($pDiffE1 %)| $totalE1\n";
        echo "A2 + E1 | $equal ($pEq %) | $diff ($pDiff %)| $total\n";
        return '';
    }
    
    
}// end class
