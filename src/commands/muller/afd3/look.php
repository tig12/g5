<?php
/********************************************************************************
    Code to examine data/tmp/muller/afd3-women/muller-afd3-women.csv
    (not the raw file, the intermediate file generated by raw2tmp.php).
    Not part of any build process - only to try to understand.
    
    To add a new function : 
        - add <entry> in POSSIBLE_PARAMS
        - implement a method named "look_<entry>"
    
    @license    GPL
    @history    2021-04-11, Thierry Graff : Creation
********************************************************************************/
namespace g5\commands\muller\afd3;

use g5\patterns\Command;
use g5\commands\cura\Cura;
use tiglib\arrays\sortByKey;

class look implements Command {
    
    /** 
        Possible values of the command, for ex :
        php run-g5.php muller afd3 look gauquelin
    **/
    const POSSIBLE_PARAMS = [
        'source',
        'gauquelin',
    ];
    
    // *****************************************
    /** 
        Routes to the different actions, based on $param
        @param $params Array
                       First element indicates which method execute ; must be one of self::POSSIBLE_PARAMS
                       Other elements are transmitted to the called method.
                       (Called methods are responsible to handle their params).
    **/
    public static function execute($params=[]): string{
        $possibleParams_str = implode(', ', self::POSSIBLE_PARAMS);
        if(count($params) == 0){
            return "PARAMETER MISSING\n"
                . "Possible values for parameter : $possibleParams_str\n";
        }
        $param = $params[0];
        if(!in_array($param, self::POSSIBLE_PARAMS)){
            return "INVALID PARAMETER\n"
                . "Possible values for parameter : $possibleParams_str\n";
        }
        
        $method = 'look_' . $param;
        
        if(count($params) > 1){
            array_shift($params);
            return self::$method($params);
        }
        
        return self::$method();
    }
    
    
    // ******************************************************
    /**
        Checks columns SOURCE and GQ
        SOURCE contains "primary source" and "secondary source"
        See docs/newalch-muller234.html for details
    **/
    private static function look_source(){
        $report = '';
        $data = AFD3::loadTmpFile();
        $N = count($data);
        $NG = 0; // nb of record marked G in GQ column
        $source1 = array_fill_keys(['S', 'F', 'M'], 0); // primary source
        $source2 = array_fill_keys(['E', 'B', 'A', 'G'], 0); // secondary source
        $NStrange = 0;
        $reportStrange = '';
        foreach($data as $line){
            $s1 = substr($line['SOURCE'], 0, 1);
            $s2 = substr($line['SOURCE'], 1);
            $source1[$s1]++;
            $source2[$s2]++;
            $GQ = $line['GQ'];
            if($GQ == 'G'){
                $NG++;
            }
            if($GQ != 'G' && $s2 == 'G'){
                $reportStrange .=  "  {$line['SOURCE']} {$line['GQ']} {$line['MUID']}"
                    . " {$line['FNAME']} {$line['GNAME']}\t{$line['DATE']} {$line['OCCU']} \n";
                $NStrange++;
            }
        }
        $report .= "Primary source:\n";
        foreach($source1 as $k => $v){
            $report .= "  $k: $v\n";
        }
        $report .= "Secondary source:\n";
        foreach($source2 as $k => $v){
            $report .= "  $k: $v\n";
        }
        $report .= "$NStrange strange lines: secondary source contains 'G' but not marked 'G'\n";
        $report .= $reportStrange;
        $report .= "$NG lines marked 'G'\n";
        $NNoG = $N - $NG;
        $report .= "$NNoG lines not marked 'G'\n";
        return $report;
    }
    
    // ******************************************************
    /**
        Lists persons supposed to be present in Gauquelin data
    **/
    private static function look_gauquelin(){
        $report = '';
        $data = AFD3::loadTmpFile();
        foreach($data as $line){
            $s1 = substr($line['SOURCE'], 0, 1);
            $s2 = substr($line['SOURCE'], 1);
            $GQ = $line['GQ'];
            if($GQ == 'G' || $s2 == 'G'){
                $report .=  "{$line['GQ']} {$line['MUID']} {$line['FNAME']} {$line['GNAME']}\t{$line['DATE']} {$line['CY']} \n";
            }
        }
        return $report;
    }
    
    
}// end class
