<?php
/********************************************************************************
    Code to examine 5-tmp/newalch-csv/1083MED.csv
    (not the raw file, the intermediate file generated by raw2csv.php).
    Not part of any build process - only to try to understand.
    
    To add a new function : 
        - add <entry> in POSSIBLE_PARAMS
        - implement a method named "look_<entry>"
    
    @license    GPL
    @history    2019-05-11 18:58:50+02:00, Thierry Graff : creation
********************************************************************************/
namespace g5\transform\newalch\muller1083;

use g5\patterns\Command;
use g5\transform\cura\Cura;

class look implements Command {
    
    /** 
        Possible values of the command, for ex :
        php run-g5.php newalch ertel4391 look eminence
    **/
    const POSSIBLE_PARAMS = [
        'curanames',
        'gnr',
        'sample',
    ];
    
    // *****************************************
    /** 
        Routes to the different actions, based on $param
        @param $param Array containing one element (a string)
                      Must be one of self::POSSIBLE_PARAMS
    **/
    public static function execute($params=[]): string{
        $possibleParams_str = implode(', ', self::POSSIBLE_PARAMS);
        if(count($params) == 0){
            return "PARAMETER MISSING in g5\\transform\\newalch\\muller1083\\look\n"
                . "Possible values for parameter : $possibleParams_str\n";
        }
        $param = $params[0];
        if(!in_array($param, self::POSSIBLE_PARAMS)){
            return "INVALID PARAMETER in g5\\transform\\newalch\\muller1083\\look\n"
                . "Possible values for parameter : $possibleParams_str\n";
        }
        $method = 'look_' . $param;
        self::$method();
        return '';
    }
    
    
    // ******************************************************
    /**
        Look at SAMPLE column.
    **/
    private static function look_sample(){
        $rows = Muller1083::loadTmpFile();
        $res = []; // assoc codes => nb of records with this code
        foreach($rows as $row){
            if(!isset($res[$row['SAMPLE']])){
                $res[$row['SAMPLE']] = 0;
            }
            $res[$row['SAMPLE']] ++;
        }
        ksort($res);
        foreach($res as $k => $v){
            echo "$k\t: $v\n";
        }
    }
    
    
    // ******************************************************
    /**
        Look at GNR column.
        Indicates the number of records common with cura A3 and E1
    **/
    private static function look_gnr(){
        $rows = Muller1083::loadTmpFile();
        $res = [
            'EMPTY' => 0,
            'A2' => 0,
            'E1' => 0,
        ];
        foreach($rows as $row){
            $gnr = $row['GNR'];
            if($gnr == ''){
                $res['EMPTY']++;
            }
            else if(substr($gnr, 0, 3) == 'SA2'){
                $res['A2']++;
            }
            else if(substr($gnr, 0, 3) == 'ND1'){
                $res['E1']++;
            }
            else{
                echo "Unknown GNR : $gnr\n";
            }
        }
        foreach($res as $k => $v){
            echo "$k \t: $v\n";
        }
        echo "A2 + E1 : " . ($res['A2'] + $res['A2']) . "\n";
        echo "Total \t: " . array_sum($res) . "\n";
    }
    
    
    // ******************************************************
    /**
        @param $
    **/
    public static function look_curanames(){
        $muller = $a2 = []; // assoc arrays ; keys = Gauquelin's NUM
        // build names from Muller file
        $rows = Muller1083::loadTmpFile();
        foreach($rows as $row){
            $gnr = $row['GNR'];
            if(substr($gnr, 0, 3) == 'SA2'){
                $NUM = substr($gnr, 3);
                $muller[$NUM] = [
                    'FNAME' => $row['FNAME'],
                    'GNAME' => $row['GNAME'],
                    'NR' => $row['NR'],
                ];
            }
        }
        ksort($muller);
        // build names from A2
        $rows = Cura::loadTmpCsv('A2');
        foreach($rows as $row){
            $NUM = $row['NUM'];
            if(isset($muller[$NUM])){
                $a2[$NUM] = [
                    'FNAME' => $row['FNAME'],
                    'GNAME' => $row['GNAME'],
                ];
            }
        }
        // print
        foreach($muller as $NUM => $val){
            if($val['FNAME'] == $a2[$NUM]['FNAME']){
                continue;
            }
            echo $NUM . ' ' . $val['FNAME'] . ' | ' . $val['GNAME'] . ' ' . $val['NR'] . "\n";
            echo $NUM . ' ' . $a2[$NUM]['FNAME'] . ' | ' . $a2[$NUM]['GNAME'] . "\n";
            echo "\n";
        }
    }
}// end class
